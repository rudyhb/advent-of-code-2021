use std::ops::{Add};
use std::str::FromStr;

pub fn run() {
//     let input = "forward 5
// down 5
// forward 8
// up 3
// down 8
// forward 2";
    let input = get_input();

    let position: Position = input.split('\n')
        .fold(Default::default(), |sum, current| {
            let trajectory: Position = current.parse().unwrap();
            let next = sum + trajectory.clone();
            println!("current: {:?} -> {:?}", trajectory, next);
            next
        });

    println!("final position: {:?}", position);
    println!("product: {}", position.product());
}

#[derive(Debug, Clone)]
struct Position {
    depth: i32,
    horizontal: i32,
    aim: i32,
    aim_x: i32
}

impl Default for Position {
    fn default() -> Self {
        Self {
            depth: 0,
            horizontal: 0,
            aim: 0,
            aim_x: 0
        }
    }
}

impl Add for Position {
    type Output = Self;

    fn add(self, rhs: Self) -> Self::Output {
        if rhs.aim_x == 0 {
            Self {
                horizontal: self.horizontal + rhs.horizontal,
                depth: self.depth + rhs.depth,
                aim: self.aim + rhs.aim,
                aim_x: 0
            }
        } else {
            Self {
                horizontal: self.horizontal + rhs.horizontal + rhs.aim_x,
                depth: self.depth + rhs.depth + (self.aim + rhs.aim) * rhs.aim_x,
                aim: self.aim + rhs.aim,
                aim_x: 0
            }
        }
    }
}

impl Position {
    pub fn product(&self) -> i32 {
        self.depth * self.horizontal
    }
}

impl FromStr for Position {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let value: i32 = s.split(' ').last().ok_or(())?.parse().or(Err(()))?;
        match s.split(' ').next().ok_or(())? {
            "down" => Ok(Self {
                depth: 0,
                horizontal: 0,
                aim: value,
                aim_x: 0
            }),
            "up" => Ok(Self {
                depth: 0,
                horizontal: 0,
                aim: -value,
                aim_x: 0
            }),
            "forward" => Ok(Self {
                depth: 0,
                horizontal: 0,
                aim: 0,
                aim_x: value
            }),
            _ => Err(())
        }
    }
}

fn get_input() -> &'static str {
    "forward 6
forward 6
down 6
down 5
up 2
forward 4
forward 8
up 9
forward 3
down 1
forward 2
forward 3
down 1
down 3
down 3
forward 9
down 6
forward 1
up 5
down 1
forward 8
forward 7
up 8
forward 7
down 9
forward 5
forward 4
forward 2
down 3
down 6
down 6
down 5
forward 5
forward 4
forward 8
up 3
forward 6
down 4
up 2
forward 8
forward 6
forward 1
up 2
down 9
down 9
up 5
down 1
up 1
up 3
forward 2
forward 4
down 8
down 1
up 1
up 4
up 1
up 2
forward 4
down 1
forward 1
down 3
forward 4
down 1
down 6
forward 3
down 9
down 4
up 4
down 3
forward 4
down 3
up 4
forward 5
down 9
forward 4
forward 1
forward 1
forward 4
up 6
up 9
down 1
down 1
forward 6
down 1
down 5
down 4
forward 8
down 8
down 2
down 5
down 6
down 4
down 9
up 8
down 4
forward 5
up 6
forward 2
forward 9
down 5
forward 3
forward 6
down 9
up 3
forward 7
forward 1
forward 1
up 6
forward 3
down 3
down 1
up 7
forward 2
forward 9
forward 4
down 9
forward 4
forward 5
up 7
down 1
up 9
down 6
up 5
forward 9
forward 9
down 4
forward 1
forward 2
forward 1
down 2
forward 7
up 6
up 5
up 6
down 4
down 6
down 9
forward 9
down 9
down 1
down 2
up 7
forward 3
down 2
up 8
forward 5
forward 2
up 2
down 9
down 2
down 8
forward 8
down 2
down 8
forward 3
up 1
forward 7
forward 1
up 9
forward 1
forward 1
forward 1
down 1
down 6
forward 2
down 8
down 9
forward 3
up 9
down 5
down 2
forward 7
forward 1
forward 6
down 5
down 4
down 2
down 7
down 1
forward 8
down 3
up 8
forward 2
down 6
forward 9
up 6
forward 3
forward 7
down 3
down 8
down 8
down 7
down 8
forward 3
down 1
forward 4
down 8
forward 1
forward 1
forward 4
forward 6
up 9
forward 8
up 6
forward 4
forward 4
down 1
down 7
up 9
forward 5
down 9
down 1
up 2
down 7
forward 8
forward 9
forward 6
forward 8
up 1
forward 2
down 7
up 9
up 5
forward 6
forward 7
down 4
forward 1
down 2
down 7
down 4
down 8
down 4
forward 7
down 2
down 7
forward 5
down 3
forward 6
up 5
up 9
down 5
up 2
up 6
forward 6
forward 9
down 8
forward 8
forward 8
forward 3
up 2
forward 4
down 9
down 3
up 2
down 9
forward 9
forward 8
forward 6
forward 4
up 8
down 3
up 7
up 7
up 5
up 3
forward 3
up 7
up 8
down 6
down 3
down 4
down 1
forward 1
forward 3
down 6
down 6
forward 2
up 1
forward 9
up 1
forward 9
down 1
forward 2
forward 3
up 3
down 7
forward 6
up 4
forward 5
up 4
forward 4
down 6
down 9
down 8
down 1
forward 8
up 4
forward 6
down 8
down 7
down 9
forward 7
forward 4
down 4
forward 8
up 4
down 7
down 1
down 7
up 6
forward 3
down 8
down 6
down 5
down 7
down 5
forward 3
forward 5
down 2
down 8
up 4
forward 9
down 5
down 1
forward 6
down 2
down 6
down 3
up 3
up 5
forward 8
up 2
down 4
down 5
up 4
forward 1
forward 2
up 4
forward 7
forward 2
forward 4
forward 6
down 1
down 9
up 2
down 7
down 6
up 1
up 2
forward 7
forward 9
forward 4
forward 6
down 4
up 7
up 2
forward 3
down 8
up 5
up 7
down 4
down 4
forward 1
forward 8
forward 4
forward 1
up 8
down 3
down 5
down 7
up 2
forward 6
down 6
down 8
forward 2
up 7
down 6
down 6
up 4
up 6
up 4
down 3
forward 9
up 4
forward 8
forward 7
down 5
down 4
down 3
forward 7
forward 3
up 7
forward 5
down 2
forward 4
forward 3
forward 1
down 9
up 2
up 3
up 7
up 6
forward 1
up 3
down 3
up 9
forward 2
forward 7
forward 6
forward 2
forward 9
forward 9
forward 5
up 2
down 6
down 3
down 2
forward 7
down 4
forward 1
up 7
forward 8
down 5
down 6
down 7
up 5
forward 6
forward 5
up 5
up 6
down 4
up 8
up 3
forward 9
down 4
down 4
down 7
up 7
down 8
down 7
forward 2
forward 9
down 2
down 1
forward 5
down 2
forward 7
down 5
down 4
down 7
forward 9
forward 2
down 6
forward 8
down 6
down 6
up 8
forward 9
up 4
down 9
forward 7
up 1
up 2
forward 9
down 9
down 6
down 5
forward 2
down 9
down 1
forward 1
down 7
down 6
up 6
down 4
forward 9
up 5
down 3
down 9
forward 5
down 2
forward 1
forward 4
forward 1
forward 1
forward 4
down 2
up 3
forward 9
down 5
down 2
forward 5
down 6
down 4
forward 9
forward 3
forward 4
forward 9
forward 5
forward 3
down 5
up 9
down 5
forward 8
down 9
forward 7
down 3
up 3
down 7
up 2
forward 5
forward 3
up 7
down 1
forward 2
down 9
down 5
down 2
forward 6
forward 6
forward 5
down 5
down 1
down 4
down 7
forward 4
forward 3
forward 1
forward 4
down 1
up 7
up 5
forward 2
up 3
down 2
forward 2
forward 8
down 7
forward 9
forward 8
down 4
down 5
forward 4
forward 7
up 9
down 5
forward 4
down 7
forward 5
down 8
forward 5
forward 2
forward 7
forward 3
forward 1
forward 2
up 1
up 5
up 1
up 3
down 9
up 9
down 8
forward 4
down 3
forward 7
down 6
forward 1
down 7
up 3
forward 1
forward 6
up 9
down 6
forward 3
down 1
forward 7
down 9
up 3
up 9
forward 6
up 1
forward 5
forward 7
forward 7
up 7
down 2
up 7
down 8
forward 7
up 5
down 9
up 1
forward 4
forward 4
forward 9
down 6
up 3
down 8
down 8
up 2
down 8
down 8
up 7
down 8
up 2
up 4
up 1
forward 7
forward 9
forward 9
down 4
up 8
forward 9
down 9
up 1
forward 1
forward 1
down 5
up 7
down 8
forward 4
forward 3
down 7
forward 8
up 2
down 2
down 6
down 4
forward 9
forward 7
down 9
down 4
forward 8
down 5
forward 7
down 2
forward 6
up 8
forward 3
down 5
forward 2
forward 6
down 9
up 6
up 9
up 2
forward 2
down 2
forward 5
down 7
down 8
down 4
down 5
forward 6
forward 2
up 9
down 3
forward 3
up 8
forward 2
down 9
forward 4
forward 1
forward 1
up 3
up 9
forward 6
down 5
down 2
up 2
up 9
forward 9
forward 6
forward 3
forward 9
up 3
forward 9
up 4
up 5
forward 6
forward 6
down 8
forward 5
down 9
up 5
forward 5
down 8
down 3
up 8
down 2
forward 4
forward 6
up 4
down 3
down 3
down 5
up 8
down 7
down 4
forward 9
forward 2
down 1
down 8
forward 8
up 9
forward 3
down 2
up 8
down 9
up 2
down 3
forward 8
forward 8
forward 2
down 3
forward 7
down 7
down 4
forward 9
forward 9
down 5
up 7
forward 2
up 7
up 1
forward 4
up 2
down 4
down 7
down 4
down 1
up 3
down 5
down 5
forward 6
forward 2
down 2
forward 9
down 4
up 8
forward 9
forward 9
up 7
forward 4
forward 9
forward 2
forward 2
forward 1
forward 6
down 3
down 5
forward 7
up 4
forward 9
forward 9
up 1
forward 9
down 5
up 2
up 2
down 5
down 5
forward 7
down 1
forward 5
up 8
up 9
down 9
forward 3
up 1
forward 6
down 8
down 2
forward 6
up 9
down 3
down 1
down 1
up 2
up 1
up 9
forward 5
forward 6
down 7
forward 1
down 3
forward 6
forward 2
forward 9
forward 7
up 5
down 4
down 6
down 2
down 5
forward 7
up 1
down 7
down 4
down 7
down 4
forward 2
forward 8
up 7
up 9
down 6
up 8
up 3
up 3
up 5
down 1
forward 4
forward 9
forward 1
down 9
up 5
down 3
down 1
down 1
up 3
down 1
up 2
up 2
down 5
forward 8
down 8
up 6
forward 9
up 1
up 3
down 4
forward 7
up 4
forward 3
down 8
forward 6
down 6
forward 1
down 4
down 7
up 3
down 4
forward 5
forward 4
down 6
up 4
down 6
up 8
forward 1
up 8
forward 3
down 8
forward 3
down 9
forward 5
down 6
forward 5
forward 7
forward 8
down 8
down 1
down 1
down 7
forward 9
down 4
forward 3
down 8
down 4
down 6
down 8
forward 5
down 5
down 1
down 9
down 6
down 7
down 1
forward 7
down 2
down 9
down 9
down 8
down 9
forward 9
down 8
forward 1
up 2
forward 4
up 2
up 7
forward 1
down 9
up 7
forward 4
forward 2
down 2
down 5
down 7
down 4
forward 8
up 2
forward 1
forward 5
down 7
forward 3
forward 6
down 3
up 5
up 8
down 5
down 1
down 7
down 6
forward 2
forward 3
forward 7
forward 6
down 2
down 4
down 1
down 5
down 4
down 7
up 5
down 4
up 9
forward 7
down 9
down 9
forward 3
forward 9
down 5
forward 1
up 1
down 4
forward 7
up 4
down 5
forward 8
forward 3
forward 6
forward 7
down 8
down 3
forward 8
down 8
forward 7
down 4
down 2
down 8
down 3
forward 4
down 5
up 5
down 9
up 5
up 4
up 3
forward 7
forward 8
forward 9
forward 5
down 7
down 2
forward 2
down 2
forward 5
forward 2
forward 6
down 4
down 5
down 7
forward 3
forward 3
forward 9
forward 6
down 2
forward 3
down 5
forward 5
forward 9
forward 6
up 4
forward 6
forward 9
down 3
down 2
forward 9
down 1
up 1
forward 1
up 3
forward 3
forward 6
up 4
up 4
forward 8
forward 1
forward 2"
}